# установка необходимых пакетов
- name: "Install required dependencies for installing rbenv and ruby-build"
  ansible.builtin.yum:
    name:
      - postgresql-devel #### Удалить, когда будет postgres
      - libxml2-devel
      - libxslt-devel 
      - gcc
      - gcc-c++
      - kernel-devel
      #############
      - git-core
      - zlib
      - zlib-devel
      - patch
      - readline
      - readline-devel
      - libyaml-devel
      - libffi-devel
      - openssl-devel
      - make
      - bzip2
      - autoconf
      - automake
      - libtool
      - bison
      - curl
      - sqlite-devel
    state: latest
    update_cache: yes


# проверка, если Ruby уже установлен 
- name: "Check install Ruby"
  become: no
  ansible.builtin.shell: ruby -v | awk '{print $1}'
  register: ruby_status
- debug:
    var: ruby_status
- debug:
    var: ruby_status.stdout
    

# Скачавание и установка rbenv
- name: "Install rbenv"
  become: no
  ansible.builtin.command:
    chdir: "/home/vagrant"
    cmd: "{{ item }}"
  loop:
    - git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    - git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
  when: ruby_status is defined and ruby_status.stdout != "ruby"


- name: "Export rbenv path into .bashrc"
  become: no
  ansible.builtin.shell: |
    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
    echo 'eval "$(rbenv init -)"' >> ~/.bashrc
    echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
    source ~/.bashrc
  # args:
  #   executable: /bin/bash
  when: ruby_status is defined and ruby_status.stdout != "ruby"

# Установка Ruby
- name: "Install Ruby"
  become: no
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    - "rbenv install {{ ruby_version }}"
    - "rbenv global {{ ruby_version }}"
  when: ruby_status is defined and ruby_status.stdout != "ruby"